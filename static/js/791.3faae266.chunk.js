"use strict";(self.webpackChunkvickraj_website=self.webpackChunkvickraj_website||[]).push([[791],{5420:function(e,t,i){i.r(t),i.d(t,{default:function(){return f}});var a=i(2791),n=JSON.parse('{"TN":"Personal Website","v":"Vickram Rajendran","kQ":"Personal Website written in React, Javascript and Typescript through create-react-app and deployed with Github-Pages. The antd library was used for React UI, and react-router to make this a Single Page Application. This was upgraded in 2022 from my previous website to have a more modern style, as well as improved mobile viewing.","p4":[{"title":"Code","href":"https://github.com/vickraj/vickraj.github.io"}],"RL":"Independent Project, last updated in 2022.","qv":"website.png"}'),r=JSON.parse('{"TN":"Elliptic Curve Algorithms","v":"Vickram Rajendran","kQ":"This is an implementation of various algorithms on Elliptic Curves, including finding divisors to efficiently compute the Weil Pairing, solving discrete logs on Elliptic Curves, One Round Tripartite Diffie-Hellman Key exchange, the elliptic curve method for factorization, primality testing, the Elliptic Curve Digital Signature Algorithm, regular computation with the Elliptic Curve group law, and efficient computations in prime fields such as computing inverses and square roots (Tonelli-Shanks). Subsequent versions should include full Galois field support, the MOV attack, the SEA algorithm for point counting, Bonneh-Franklin\'s Identity Based Encryption scheme, and maybe some Attribute Based Encryption schemes as well.","p4":[{"title":"Code","href":"https://github.com/vickraj/Elliptic-Curve-Crypto"}],"RL":"Independent Project, mostly complete as of 2018.","qv":"elliptic.png"}'),o=JSON.parse('{"TN":"Morse Theory and Linkages","v":"Vickram Rajendran","kQ":"The final paper and presentation I wrote for my Computational Geometry class (Fall 2017), in which Morse Theory is used to determine the topology of the moduli spaces of closed linkages. A linkage is a system of \'bars\', connected to each other only at their endpoints, such that each bar has a specified length. A configuration of the linkage is a set of points in the plane determining where the endpoints of these bars are, so we can imagine that a configuration is simply a realization of these bars into the plane. We say that two configurations are \'the same\' if one is an affine transformation of the other, and the moduli space is the configuration space modulo this restriction. It is easy enough to believe that the moduli space of a linkage is (usually) smooth, since we can visually perturb a configuration slightly without destroying it, and that allows us to study the topology of the moduli space with tools from differential topology.","p4":[{"title":"Paper","href":"https://github.com/vickraj/Morse_Theory_and_Linkages"}],"RL":"Complete, as of 2017.","qv":"morse.png"}'),s=JSON.parse('{"TN":"Text Classification of Horror Authors","v":"Vickram Rajendran, Caleb Ho","kQ":"The final project for my Machine Learning class (Fall 2017), in which my partner and I implemented, compared, tuned, optimized, and analyzed several algorithms for text classification, the problem of determining an author given a snippet of text and a set of possible authors. We used standard algorithms like Multinomial Naive-Bayes, Topic modelling with Latent Dirichlet Allocation and Non-negative Matrix Factorization, and sequential learners like an Long Short Term Memory neural network and a Hidden Markov Model. After comparing the performance and tuning our models, we analyzed the results with both log-loss and categorical cross-entropy, as well as more general trends between the various classes of models (sequential vs topic, discriminative vs general). Our final results had over 80% average accuracy on two different classifiers.","p4":[{"title":"Paper","href":"https://github.com/vickraj/TextClassification/blob/master/Final_Paper.pdf"},{"title":"Code","href":"https://github.com/vickraj/TextClassification"}],"RL":"Complete, as of 2017.","qv":"textclass.png"}'),l=JSON.parse('{"TN":"Cryptographically Secure Pseudo-Random Number Generators","v":"Vickram Rajendran, David Liu","kQ":"This project was inspired after completing the HackMIT 2016 Admissions Puzzle, which is a series of coding, AI, and exploitation challenges, gradually rising in difficulty, developed by the HackMIT team. After solving a nice xkcd riddle, performing NoSQL injection and breaking a hash, and reading Backus-Naur form to code in an entirely new language, the final challenge was to predict the value of a random number generator. Luckily they chose an insecure pseudorandom number generator - Xorshift128+ (incidentally also used by Javascript\'s .random()), and after dealing with Mantissa\'s and more, we coded an SMT solver to find the initial seed and predict the next random number. After seeing the insecurity of this pseudo RNG, we decided to make our final paper in my computer security class (Fall 2016) about modern PRNG\'s and their cryptographic security. A year later I expanded on this work, and presented this survey of cryptographically secure pseudorandom number generators with proofs at the senior conference poster presentation.","p4":[{"title":"Paper","href":"https://github.com/vickraj/Secure-PRNG-s/blob/master/Final_Paper.pdf"},{"title":"Poster","href":"https://github.com/vickraj/Secure-PRNG-s/blob/master/Poster.pdf"}],"RL":"Complete, as of 2016.","qv":"prng.png"}'),c=JSON.parse('{"TN":"Solving the Worlds Hardest Game","v":"Vickram Rajendran, Ted Park","kQ":"My partner and I use Approximate Q-Learning to create an Agent that beats the popular flash game \'The World\'s Hardest Game\'. We modified enemies behavior from UC Berkeley\'s open source pacman implementation to create levels that resembled the levels of the World\'s Hardest Game, and then reskinned the sprites. Afterwards we implemented our own version of approximate Q-learning, and trained the agent on it to see how well it could beat our duplicate levels. This was the final project for my Artificial Intelligence class (Spring 2016).","p4":[{"title":"Paper","href":"https://github.com/vickraj/WorldsHardestGame/blob/master/CS_63___Final.pdf"},{"title":"Code","href":"https://github.com/vickraj/WorldsHardestGame"}],"RL":"Complete, as of 2016.","qv":"whg.png"}'),p=JSON.parse('{"TN":"Search Algorithms for Primitive Pythagorean Triplets","v":"Vickram Rajendran","kQ":"Pythagorean triples have long been studied, and appear in a surprising amount of contexts. However, while several algorithms for generating all possible triplets have been made, not much thought or research has gone into specific algorithms that generate triples satisfying certain conditions. In this research we examine several interesting conditions we may want pythagorean triangles to have, and posit efficient algorithms to find triples satisfying certain properties. We perform complexity analysis on various search problems, and find surprising reductions for efficiently finding primitive pythagorean triplets that have a specific odd leg.","p4":[],"RL":"Independent Project, on hiatus as of 2020.","qv":"ppt.png"}'),h=i(184),d=(0,a.lazy)((function(){return Promise.resolve().then(i.bind(i,2478))})),u=(0,a.lazy)((function(){return i.e(333).then(i.bind(i,3333))})),m=(0,a.lazy)((function(){return Promise.all([i.e(58),i.e(301)]).then(i.bind(i,5301))})),f=function(){return(0,h.jsxs)(d,{children:[(0,h.jsx)(u,{}),(0,h.jsx)(m,{type:"left",title:n.TN,author:n.v,content:n.kQ,accept:n.RL,link:n.p4,icon:n.qv,id:"website"}),(0,h.jsx)(m,{type:"left",title:p.TN,author:p.v,content:p.kQ,accept:p.RL,link:p.p4,icon:p.qv,id:"ppt"}),(0,h.jsx)(m,{type:"left",title:r.TN,author:r.v,content:r.kQ,accept:r.RL,link:r.p4,icon:r.qv,id:"elliptic"}),(0,h.jsx)(m,{type:"left",title:o.TN,author:o.v,content:o.kQ,accept:o.RL,link:o.p4,icon:o.qv,id:"morse"}),(0,h.jsx)(m,{type:"left",title:s.TN,author:s.v,content:s.kQ,accept:s.RL,link:s.p4,icon:s.qv,id:"textclass"}),(0,h.jsx)(m,{type:"left",title:l.TN,author:l.v,content:l.kQ,accept:l.RL,link:l.p4,icon:l.qv,id:"prng"}),(0,h.jsx)(m,{type:"left",title:c.TN,author:c.v,content:c.kQ,accept:c.RL,link:c.p4,icon:c.qv,id:"whg"})]})}}}]);
//# sourceMappingURL=791.3faae266.chunk.js.map